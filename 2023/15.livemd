# Day 15: Lens Library â€“ Advent of Code 2023

```elixir
input =
  File.read!("/Users/pw/src/weiland/adventofcode/2023/input/15.txt")
  # remove new lines
  |> String.replace("\n", "")

test_input = "rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7"
```

## Parsing

```elixir
parse = fn input ->
  input
  |> String.split(",")
  |> Enum.map(&String.to_charlist/1)
end

parse.(test_input)
```

## Part One

```elixir
hash = fn char_list ->
  char_list
  |> Enum.reduce(0, fn curr, acc ->
    acc
    |> Kernel.+(curr)
    |> Kernel.*(17)
    |> rem(256)
  end)
end

hash.(String.to_charlist("HASH")) == 52
```

```elixir
part_one = fn input ->
  input
  |> parse.()
  |> Enum.map(&hash.(&1))
  |> Enum.sum()
end

part_one.(test_input) == 1320 &&
  part_one.(input)
```

## Part Two

```elixir
parse_two = fn input ->
  input
  |> String.split(",")
  |> Enum.map(fn line ->
    if String.contains?(line, "=") do
      [label, flen] = String.split(line, "=")
      {:add, hash.(String.to_charlist(label)), label, String.to_integer(flen)}
    else
      label = String.replace(line, "-", "")
      {:remove, hash.(String.to_charlist(label)), label}
    end
  end)
end

parse_two.(test_input)
```

```elixir
part_two = fn input ->
  input
  |> parse_two.()
  |> Enum.reduce(Map.new(), fn
    {:add, box, label, flen}, map ->
      lst = Map.get(map, box, [])

      if Enum.find(lst, fn {l, _i} -> l == label end) != nil do
        updated = Enum.map(lst, fn {l, i} -> if l == label, do: {l, flen}, else: {l, i} end)
        Map.put(map, box, updated)
      else
        Map.put(map, box, lst ++ [{label, flen}])
      end

    {:remove, box, label}, map ->
      lst = Map.get(map, box, [])
      updated = Enum.reject(lst, fn {l, _i} -> l == label end)
      Map.put(map, box, updated)
  end)
  |> Enum.map(fn {box, lst} ->
    lst
    |> Enum.with_index(1)
    |> Enum.reduce(0, fn {{_l, focal_length}, i}, acc ->
      (box + 1) * i * focal_length + acc
    end)
  end)
  |> Enum.sum()
end

part_two.(test_input) == 145 &&
  part_two.(input)
```
