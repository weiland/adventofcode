# Day 5: If You Give A Seed A Fertilizer â€“ Advent of Code 2023

```elixir
input =
  File.stream!("/Users/pw/src/weiland/adventofcode/2023/input/05.txt")
  |> Enum.join("")

# |> Stream.map(&String.trim/1)

test_input =
  "seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4"
```

## Parsing

```elixir
parse_from_stream = fn raw_almanac ->
  seeds =
    raw_almanac
    |> Stream.take(1)
    |> Enum.to_list()
    |> Enum.at(0)
    |> then(fn "seeds: " <> seeds -> seeds end)
    |> String.split(" ")
    |> Enum.map(&String.to_integer/1)

  maps =
    raw_almanac
    # remove seeds
    |> Stream.drop(1)
    |> Stream.reject(&(&1 == ""))

  %{seeds: seeds, maps: maps}
end

parse_string = fn raw_almanac ->
  ["seeds: " <> seeds | maps] = String.split(raw_almanac, "\n\n")

  maps =
    maps
    |> Enum.map(&String.split(&1, "\n"))
    |> Enum.map(fn [map | numbers] ->
      [[_match, from, to]] = Regex.scan(~r/(.*)-to-(.*) map:/, map)

      ins =
        numbers
        |> Enum.reject(fn l -> l == "" end)
        |> Enum.map(fn l -> String.split(l, " ") |> Enum.map(&String.to_integer/1) end)

      [from, to, ins]
    end)

  %{seeds: String.split(seeds, " ") |> Enum.map(&String.to_integer/1), maps: maps}
end
```

## Part One

```elixir
part_one = fn input ->
  %{seeds: seeds, maps: maps} = parse_string.(input)

  Enum.reduce(maps, seeds, fn [_s, _d, map], acc ->
    Enum.map(acc, fn seed ->
      Enum.reduce_while(map, seed, fn [d, s, l], _acc ->
        if s <= seed && seed < s + l do
          {:halt, d + (seed - s)}
        else
          {:cont, seed}
        end
      end)
    end)
  end)
  |> Enum.min()
end

IO.inspect(part_one.(test_input) == 35, label: "Smoke test part one")

part_one.(input)
```

## Part Two

```elixir
part_two = fn input ->
  input
  |> Enum.to_list()
end

part_two.(test_input)
```

[New Livebook](http://localhost:57389/import?url=https%3A%2F%2Fgithub.com%2Fweiland%2Fadventofcode%2Fblob%2Fmain%2Futils%2Fboilerplates%2Fboilerplate.livemd)
